---
import Menu from "@icons/Menu.astro";
import Sun from "@icons/Sun.astro";
import Moon from "@icons/Moon.astro";

import { Image } from "astro:assets";
import type { HeaderProps } from "@types";

import { background } from "src/styles/presets";

type Props = HeaderProps;

const { siteName, siteLogo, navLinks } = Astro.props;
---

<header
  class:list={[
    ...background.glassNav,
    "sticky top-3 z-50 mx-auto flex w-full max-w-[90vw] items-center justify-between rounded-2xl px-4 py-3 shadow-md backdrop-blur-md transition-all sm:px-6 md:px-8",
  ]}
>
  <!-- Logo + Theme Toggle -->
  <a href="/" aria-label="Home" class="flex items-center gap-3 sm:gap-4">
    {
      siteLogo ? (
        <Image
          class="rounded-full"
          src={siteLogo}
          width="40"
          height="40"
          alt="Website logo"
        />
      ) : (
        <span class="select-none text-xl font-serif font-semibold tracking-tight text-base-content">
          {siteName}
        </span>
      )
    }

    <label
      class:list={[background.card, "swap swap-rotate p-2 rounded-full"]}
      aria-label="Toggle theme"
    >
      <input type="checkbox" id="theme-toggle-checkbox" />
      <Sun class="swap-off w-3.5 h-3.5 fill-current text-base-content/80" />
      <Moon class="swap-on w-3.5 h-3.5 fill-current text-base-content/80" />
    </label>
  </a>

  <!-- Right-side actions -->
  <div class="flex items-center gap-2">
    <button
      type="button"
      id="menu-button"
      class="btn btn-ghost btn-sm sm:hidden"
      aria-expanded="false"
      aria-controls="main-menu"
      aria-label="Toggle menu"
    >
      <Menu class="w-5 h-5" />
    </button>
  </div>

  <!-- Navigation Links -->
  <nav
    id="main-menu"
    class:list={[
      background.card,
      "bg-base-200/90",
      "absolute right-4 top-[4.5rem] hidden rounded-box p-4 shadow-xl sm:static sm:block sm:border-none sm:bg-transparent sm:p-0 sm:shadow-none",
    ]}
  >
    <ul class="flex flex-col gap-2 sm:flex-row sm:gap-4">
      {
        navLinks.map((link) => (
          <li>
            <a
              class="text-sm font-medium text-base-content/90 hover:text-primary transition duration-150"
              href={link.href}
            >
              {link.text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<script>
  import { siteConfig } from "src/config";

  const { theme: themes } = siteConfig;

  const checkbox = document.getElementById("theme-toggle-checkbox");

  function applyTheme(theme) {
    const currentTheme = document.documentElement.getAttribute("data-theme");

    // Avoid unnecessary re-apply
    if (currentTheme === theme) return;

    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);

    if (checkbox) checkbox.checked = theme === themes.dark;
  }

  // Set theme on page load from saved value or fallback to light
  const saved = localStorage.getItem("theme") || themes.light;
  applyTheme(saved);

  // Toggle listener
  checkbox?.addEventListener("change", () => {
    const newTheme = checkbox.checked ? themes.dark : themes.light;
    applyTheme(newTheme);
  });
</script>

<script>
  // Toggle mobile menu
  const button = document.querySelector("#menu-button");
  const menu = document.querySelector("#main-menu");
  const navItems = document.querySelectorAll("#main-menu > ul > li > a");

  const toggleMenu = () => {
    menu?.classList.toggle("hidden");
    const isHidden = menu?.classList.contains("hidden");
    button?.setAttribute("aria-expanded", `${!isHidden}`);
  };

  button?.addEventListener("click", toggleMenu);
  navItems.forEach((item) => {
    item?.addEventListener("click", toggleMenu);
  });

  // Update navigation based on scroll position with Intersection Observer
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("href") === `#${entry.target.id}`) {
              item.classList.add("text-primary", "md:after:opacity-100");
            } else {
              item.classList.remove("text-primary", "md:after:opacity-100");
            }
          });
        }
      });
    },
    { threshold: 0.5 }
  );

  document.querySelectorAll("section").forEach((section) => {
    observer.observe(section);
  });

  // Cleanup observer
  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      document.querySelectorAll("section").forEach((section) => {
        observer.observe(section);
      });
    }
  };
</script>

<style>
  header {
    animation-timeline: scroll();
    animation-range: 0 650px;
  }
</style>
